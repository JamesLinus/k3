/*
* generated by Xtext
*/
grammar InternalLego;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package insa.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package insa.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import insa.services.LegoGrammarAccess;

}

@parser::members {
 
 	private LegoGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LegoGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgramUnit
entryRuleProgramUnit 
:
{ before(grammarAccess.getProgramUnitRule()); }
	 ruleProgramUnit
{ after(grammarAccess.getProgramUnitRule()); } 
	 EOF 
;

// Rule ProgramUnit
ruleProgramUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramUnitAccess().getBlockAssignment()); }
(rule__ProgramUnit__BlockAssignment)*
{ after(grammarAccess.getProgramUnitAccess().getBlockAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolExp
entryRuleBoolExp 
:
{ before(grammarAccess.getBoolExpRule()); }
	 ruleBoolExp
{ after(grammarAccess.getBoolExpRule()); } 
	 EOF 
;

// Rule BoolExp
ruleBoolExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolExpAccess().getAlternatives()); }
(rule__BoolExp__Alternatives)
{ after(grammarAccess.getBoolExpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileLoop
entryRuleWhileLoop 
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
(rule__WhileLoop__Group__0)
{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegExp
entryRuleNegExp 
:
{ before(grammarAccess.getNegExpRule()); }
	 ruleNegExp
{ after(grammarAccess.getNegExpRule()); } 
	 EOF 
;

// Rule NegExp
ruleNegExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegExpAccess().getGroup()); }
(rule__NegExp__Group__0)
{ after(grammarAccess.getNegExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExp
entryRuleAndExp 
:
{ before(grammarAccess.getAndExpRule()); }
	 ruleAndExp
{ after(grammarAccess.getAndExpRule()); } 
	 EOF 
;

// Rule AndExp
ruleAndExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpAccess().getGroup()); }
(rule__AndExp__Group__0)
{ after(grammarAccess.getAndExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfBlock
entryRuleIfBlock 
:
{ before(grammarAccess.getIfBlockRule()); }
	 ruleIfBlock
{ after(grammarAccess.getIfBlockRule()); } 
	 EOF 
;

// Rule IfBlock
ruleIfBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfBlockAccess().getGroup()); }
(rule__IfBlock__Group__0)
{ after(grammarAccess.getIfBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleHasTurnedCmd
entryRuleHasTurnedCmd 
:
{ before(grammarAccess.getHasTurnedCmdRule()); }
	 ruleHasTurnedCmd
{ after(grammarAccess.getHasTurnedCmdRule()); } 
	 EOF 
;

// Rule HasTurnedCmd
ruleHasTurnedCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getGroup()); }
(rule__HasTurnedCmd__Group__0)
{ after(grammarAccess.getHasTurnedCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMoveCmd
entryRuleMoveCmd 
:
{ before(grammarAccess.getMoveCmdRule()); }
	 ruleMoveCmd
{ after(grammarAccess.getMoveCmdRule()); } 
	 EOF 
;

// Rule MoveCmd
ruleMoveCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoveCmdAccess().getGroup()); }
(rule__MoveCmd__Group__0)
{ after(grammarAccess.getMoveCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrintCmd
entryRulePrintCmd 
:
{ before(grammarAccess.getPrintCmdRule()); }
	 rulePrintCmd
{ after(grammarAccess.getPrintCmdRule()); } 
	 EOF 
;

// Rule PrintCmd
rulePrintCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrintCmdAccess().getGroup()); }
(rule__PrintCmd__Group__0)
{ after(grammarAccess.getPrintCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetTurnAngleCmd
entryRuleSetTurnAngleCmd 
:
{ before(grammarAccess.getSetTurnAngleCmdRule()); }
	 ruleSetTurnAngleCmd
{ after(grammarAccess.getSetTurnAngleCmdRule()); } 
	 EOF 
;

// Rule SetTurnAngleCmd
ruleSetTurnAngleCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getGroup()); }
(rule__SetTurnAngleCmd__Group__0)
{ after(grammarAccess.getSetTurnAngleCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStopEngineCmd
entryRuleStopEngineCmd 
:
{ before(grammarAccess.getStopEngineCmdRule()); }
	 ruleStopEngineCmd
{ after(grammarAccess.getStopEngineCmdRule()); } 
	 EOF 
;

// Rule StopEngineCmd
ruleStopEngineCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStopEngineCmdAccess().getGroup()); }
(rule__StopEngineCmd__Group__0)
{ after(grammarAccess.getStopEngineCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStopProgramCmd
entryRuleStopProgramCmd 
:
{ before(grammarAccess.getStopProgramCmdRule()); }
	 ruleStopProgramCmd
{ after(grammarAccess.getStopProgramCmdRule()); } 
	 EOF 
;

// Rule StopProgramCmd
ruleStopProgramCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStopProgramCmdAccess().getGroup()); }
(rule__StopProgramCmd__Group__0)
{ after(grammarAccess.getStopProgramCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTurnCmd
entryRuleTurnCmd 
:
{ before(grammarAccess.getTurnCmdRule()); }
	 ruleTurnCmd
{ after(grammarAccess.getTurnCmdRule()); } 
	 EOF 
;

// Rule TurnCmd
ruleTurnCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTurnCmdAccess().getGroup()); }
(rule__TurnCmd__Group__0)
{ after(grammarAccess.getTurnCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObstacleCmd
entryRuleObstacleCmd 
:
{ before(grammarAccess.getObstacleCmdRule()); }
	 ruleObstacleCmd
{ after(grammarAccess.getObstacleCmdRule()); } 
	 EOF 
;

// Rule ObstacleCmd
ruleObstacleCmd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObstacleCmdAccess().getGroup()); }
(rule__ObstacleCmd__Group__0)
{ after(grammarAccess.getObstacleCmdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL 
:
{ before(grammarAccess.getBOOLEAN_LITERALRule()); }
	 ruleBOOLEAN_LITERAL
{ after(grammarAccess.getBOOLEAN_LITERALRule()); } 
	 EOF 
;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOOLEAN_LITERALAccess().getAlternatives()); }
(rule__BOOLEAN_LITERAL__Alternatives)
{ after(grammarAccess.getBOOLEAN_LITERALAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getWhileLoopParserRuleCall_0()); }
	ruleWhileLoop
{ after(grammarAccess.getExpressionAccess().getWhileLoopParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNegExpParserRuleCall_1()); }
	ruleNegExp
{ after(grammarAccess.getExpressionAccess().getNegExpParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getAndExpParserRuleCall_2()); }
	ruleAndExp
{ after(grammarAccess.getExpressionAccess().getAndExpParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIfBlockParserRuleCall_3()); }
	ruleIfBlock
{ after(grammarAccess.getExpressionAccess().getIfBlockParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCommandParserRuleCall_4()); }
	ruleCommand
{ after(grammarAccess.getExpressionAccess().getCommandParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExpAccess().getNegExpParserRuleCall_0()); }
	ruleNegExp
{ after(grammarAccess.getBoolExpAccess().getNegExpParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBoolExpAccess().getAndExpParserRuleCall_1()); }
	ruleAndExp
{ after(grammarAccess.getBoolExpAccess().getAndExpParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBoolExpAccess().getHasTurnedCmdParserRuleCall_2()); }
	ruleHasTurnedCmd
{ after(grammarAccess.getBoolExpAccess().getHasTurnedCmdParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBoolExpAccess().getObstacleCmdParserRuleCall_3()); }
	ruleObstacleCmd
{ after(grammarAccess.getBoolExpAccess().getObstacleCmdParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getMoveCmdParserRuleCall_0()); }
	ruleMoveCmd
{ after(grammarAccess.getCommandAccess().getMoveCmdParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getPrintCmdParserRuleCall_1()); }
	rulePrintCmd
{ after(grammarAccess.getCommandAccess().getPrintCmdParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getSetTurnAngleCmdParserRuleCall_2()); }
	ruleSetTurnAngleCmd
{ after(grammarAccess.getCommandAccess().getSetTurnAngleCmdParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getStopEngineCmdParserRuleCall_3()); }
	ruleStopEngineCmd
{ after(grammarAccess.getCommandAccess().getStopEngineCmdParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getStopProgramCmdParserRuleCall_4()); }
	ruleStopProgramCmd
{ after(grammarAccess.getCommandAccess().getStopProgramCmdParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getTurnCmdParserRuleCall_5()); }
	ruleTurnCmd
{ after(grammarAccess.getCommandAccess().getTurnCmdParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getHasTurnedCmdParserRuleCall_6()); }
	ruleHasTurnedCmd
{ after(grammarAccess.getCommandAccess().getHasTurnedCmdParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getObstacleCmdParserRuleCall_7()); }
	ruleObstacleCmd
{ after(grammarAccess.getCommandAccess().getObstacleCmdParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN_LITERAL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEAN_LITERALAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBOOLEAN_LITERALAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBOOLEAN_LITERALAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBOOLEAN_LITERALAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__WhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopCondAssignment_1()); }
(rule__WhileLoop__LoopCondAssignment_1)
{ after(grammarAccess.getWhileLoopAccess().getLoopCondAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getDoKeyword_2()); }

	'do' 

{ after(grammarAccess.getWhileLoopAccess().getDoKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockAssignment_3()); }
(rule__WhileLoop__BlockAssignment_3)*
{ after(grammarAccess.getWhileLoopAccess().getBlockAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getWhileLoopAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NegExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExp__Group__0__Impl
	rule__NegExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpAccess().getNotKeyword_0()); }

	'not' 

{ after(grammarAccess.getNegExpAccess().getNotKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpAccess().getExpAssignment_1()); }
(rule__NegExp__ExpAssignment_1)
{ after(grammarAccess.getNegExpAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group__0__Impl
	rule__AndExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getAndKeyword_0()); }

	'and' 

{ after(grammarAccess.getAndExpAccess().getAndKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group__1__Impl
	rule__AndExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getLeftExpAssignment_1()); }
(rule__AndExp__LeftExpAssignment_1)
{ after(grammarAccess.getAndExpAccess().getLeftExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getRightExpAssignment_2()); }
(rule__AndExp__RightExpAssignment_2)
{ after(grammarAccess.getAndExpAccess().getRightExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__0__Impl
	rule__IfBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfBlockAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__1__Impl
	rule__IfBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getConditionAssignment_1()); }
(rule__IfBlock__ConditionAssignment_1)
{ after(grammarAccess.getIfBlockAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__2__Impl
	rule__IfBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getIfBlockAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__3__Impl
	rule__IfBlock__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getThenBlockAssignment_3()); }
(rule__IfBlock__ThenBlockAssignment_3)*
{ after(grammarAccess.getIfBlockAccess().getThenBlockAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__4__Impl
	rule__IfBlock__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getGroup_4()); }
(rule__IfBlock__Group_4__0)?
{ after(grammarAccess.getIfBlockAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getIfBlockAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfBlock__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group_4__0__Impl
	rule__IfBlock__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getElseKeyword_4_0()); }

	'else' 

{ after(grammarAccess.getIfBlockAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfBlock__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfBlock__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getElseBlockAssignment_4_1()); }
(rule__IfBlock__ElseBlockAssignment_4_1)*
{ after(grammarAccess.getIfBlockAccess().getElseBlockAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__HasTurnedCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__0__Impl
	rule__HasTurnedCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getHasTurnedKeyword_0()); }

	'hasTurned' 

{ after(grammarAccess.getHasTurnedCmdAccess().getHasTurnedKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasTurnedCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__1__Impl
	rule__HasTurnedCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getHasTurnedCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasTurnedCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__2__Impl
	rule__HasTurnedCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getAngleKeyword_2()); }

	'angle' 

{ after(grammarAccess.getHasTurnedCmdAccess().getAngleKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasTurnedCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__3__Impl
	rule__HasTurnedCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getHasTurnedCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasTurnedCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__4__Impl
	rule__HasTurnedCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getAngleAssignment_4()); }
(rule__HasTurnedCmd__AngleAssignment_4)
{ after(grammarAccess.getHasTurnedCmdAccess().getAngleAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasTurnedCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasTurnedCmd__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HasTurnedCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getHasTurnedCmdAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__MoveCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__0__Impl
	rule__MoveCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getMoveKeyword_0()); }

	'move' 

{ after(grammarAccess.getMoveCmdAccess().getMoveKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MoveCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__1__Impl
	rule__MoveCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMoveCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MoveCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__2__Impl
	rule__MoveCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getPowerKeyword_2()); }

	'power' 

{ after(grammarAccess.getMoveCmdAccess().getPowerKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MoveCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__3__Impl
	rule__MoveCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getMoveCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MoveCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__4__Impl
	rule__MoveCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getPowerAssignment_4()); }
(rule__MoveCmd__PowerAssignment_4)
{ after(grammarAccess.getMoveCmdAccess().getPowerAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MoveCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MoveCmd__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getMoveCmdAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PrintCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__0__Impl
	rule__PrintCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getDisplayKeyword_0()); }

	'display' 

{ after(grammarAccess.getPrintCmdAccess().getDisplayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__1__Impl
	rule__PrintCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPrintCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__2__Impl
	rule__PrintCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getMsgKeyword_2()); }

	'msg' 

{ after(grammarAccess.getPrintCmdAccess().getMsgKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__3__Impl
	rule__PrintCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__4__Impl
	rule__PrintCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getMsgAssignment_4()); }
(rule__PrintCmd__MsgAssignment_4)
{ after(grammarAccess.getPrintCmdAccess().getMsgAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__5__Impl
	rule__PrintCmd__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getPrintCmdAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__6__Impl
	rule__PrintCmd__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getDurationKeyword_6()); }

	'duration' 

{ after(grammarAccess.getPrintCmdAccess().getDurationKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__7__Impl
	rule__PrintCmd__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_7()); }

	'=' 

{ after(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__8__Impl
	rule__PrintCmd__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getDurationAssignment_8()); }
(rule__PrintCmd__DurationAssignment_8)
{ after(grammarAccess.getPrintCmdAccess().getDurationAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__9__Impl
	rule__PrintCmd__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getCommaKeyword_9()); }

	',' 

{ after(grammarAccess.getPrintCmdAccess().getCommaKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__10__Impl
	rule__PrintCmd__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getLineKeyword_10()); }

	'line' 

{ after(grammarAccess.getPrintCmdAccess().getLineKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__11__Impl
	rule__PrintCmd__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_11()); }

	'=' 

{ after(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__12__Impl
	rule__PrintCmd__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getLineAssignment_12()); }
(rule__PrintCmd__LineAssignment_12)
{ after(grammarAccess.getPrintCmdAccess().getLineAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__13__Impl
	rule__PrintCmd__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getCommaKeyword_13()); }

	',' 

{ after(grammarAccess.getPrintCmdAccess().getCommaKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__14__Impl
	rule__PrintCmd__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getColKeyword_14()); }

	'col' 

{ after(grammarAccess.getPrintCmdAccess().getColKeyword_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__15__Impl
	rule__PrintCmd__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_15()); }

	'=' 

{ after(grammarAccess.getPrintCmdAccess().getEqualsSignKeyword_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__16__Impl
	rule__PrintCmd__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getColAssignment_16()); }
(rule__PrintCmd__ColAssignment_16)
{ after(grammarAccess.getPrintCmdAccess().getColAssignment_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCmd__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrintCmd__Group__17__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getRightParenthesisKeyword_17()); }

	')' 

{ after(grammarAccess.getPrintCmdAccess().getRightParenthesisKeyword_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}






































rule__SetTurnAngleCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__0__Impl
	rule__SetTurnAngleCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getSetTurnAngleKeyword_0()); }

	'setTurnAngle' 

{ after(grammarAccess.getSetTurnAngleCmdAccess().getSetTurnAngleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTurnAngleCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__1__Impl
	rule__SetTurnAngleCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSetTurnAngleCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTurnAngleCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__2__Impl
	rule__SetTurnAngleCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getAngleKeyword_2()); }

	'angle' 

{ after(grammarAccess.getSetTurnAngleCmdAccess().getAngleKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTurnAngleCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__3__Impl
	rule__SetTurnAngleCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getSetTurnAngleCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTurnAngleCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__4__Impl
	rule__SetTurnAngleCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getAngleAssignment_4()); }
(rule__SetTurnAngleCmd__AngleAssignment_4)
{ after(grammarAccess.getSetTurnAngleCmdAccess().getAngleAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTurnAngleCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTurnAngleCmd__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getSetTurnAngleCmdAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StopEngineCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StopEngineCmd__Group__0__Impl
	rule__StopEngineCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopEngineCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStopEngineCmdAccess().getStopEngineCmdAction_0()); }
(

)
{ after(grammarAccess.getStopEngineCmdAccess().getStopEngineCmdAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StopEngineCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StopEngineCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopEngineCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStopEngineCmdAccess().getStopEngineKeyword_1()); }

	'stopEngine' 

{ after(grammarAccess.getStopEngineCmdAccess().getStopEngineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StopProgramCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StopProgramCmd__Group__0__Impl
	rule__StopProgramCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProgramCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStopProgramCmdAccess().getStopProgramCmdAction_0()); }
(

)
{ after(grammarAccess.getStopProgramCmdAccess().getStopProgramCmdAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StopProgramCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StopProgramCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProgramCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStopProgramCmdAccess().getStopProgramKeyword_1()); }

	'stopProgram' 

{ after(grammarAccess.getStopProgramCmdAccess().getStopProgramKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TurnCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__0__Impl
	rule__TurnCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getTurnKeyword_0()); }

	'turn' 

{ after(grammarAccess.getTurnCmdAccess().getTurnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__1__Impl
	rule__TurnCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTurnCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__2__Impl
	rule__TurnCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getPowerKeyword_2()); }

	'power' 

{ after(grammarAccess.getTurnCmdAccess().getPowerKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__3__Impl
	rule__TurnCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getTurnCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__4__Impl
	rule__TurnCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getPowerAssignment_4()); }
(rule__TurnCmd__PowerAssignment_4)
{ after(grammarAccess.getTurnCmdAccess().getPowerAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__5__Impl
	rule__TurnCmd__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getTurnCmdAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__6__Impl
	rule__TurnCmd__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getAngleKeyword_6()); }

	'angle' 

{ after(grammarAccess.getTurnCmdAccess().getAngleKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__7__Impl
	rule__TurnCmd__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getEqualsSignKeyword_7()); }

	'=' 

{ after(grammarAccess.getTurnCmdAccess().getEqualsSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__8__Impl
	rule__TurnCmd__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getAngleAssignment_8()); }
(rule__TurnCmd__AngleAssignment_8)
{ after(grammarAccess.getTurnCmdAccess().getAngleAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TurnCmd__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TurnCmd__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getRightParenthesisKeyword_9()); }

	')' 

{ after(grammarAccess.getTurnCmdAccess().getRightParenthesisKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__ObstacleCmd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__0__Impl
	rule__ObstacleCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getObstacleKeyword_0()); }

	'obstacle' 

{ after(grammarAccess.getObstacleCmdAccess().getObstacleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleCmd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__1__Impl
	rule__ObstacleCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getObstacleCmdAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleCmd__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__2__Impl
	rule__ObstacleCmd__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getDistanceKeyword_2()); }

	'distance' 

{ after(grammarAccess.getObstacleCmdAccess().getDistanceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleCmd__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__3__Impl
	rule__ObstacleCmd__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getObstacleCmdAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleCmd__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__4__Impl
	rule__ObstacleCmd__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getDistanceAssignment_4()); }
(rule__ObstacleCmd__DistanceAssignment_4)
{ after(grammarAccess.getObstacleCmdAccess().getDistanceAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObstacleCmd__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObstacleCmd__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getObstacleCmdAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__ProgramUnit__BlockAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramUnitAccess().getBlockExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getProgramUnitAccess().getBlockExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopCondAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopCondBoolExpParserRuleCall_1_0()); }
	ruleBoolExp{ after(grammarAccess.getWhileLoopAccess().getLoopCondBoolExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__BlockAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getWhileLoopAccess().getBlockExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExp__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpAccess().getExpBoolExpParserRuleCall_1_0()); }
	ruleBoolExp{ after(grammarAccess.getNegExpAccess().getExpBoolExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__LeftExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getLeftExpBoolExpParserRuleCall_1_0()); }
	ruleBoolExp{ after(grammarAccess.getAndExpAccess().getLeftExpBoolExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExp__RightExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpAccess().getRightExpBoolExpParserRuleCall_2_0()); }
	ruleBoolExp{ after(grammarAccess.getAndExpAccess().getRightExpBoolExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getConditionBoolExpParserRuleCall_1_0()); }
	ruleBoolExp{ after(grammarAccess.getIfBlockAccess().getConditionBoolExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__ThenBlockAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getThenBlockExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getIfBlockAccess().getThenBlockExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfBlock__ElseBlockAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfBlockAccess().getElseBlockExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getIfBlockAccess().getElseBlockExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__HasTurnedCmd__AngleAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasTurnedCmdAccess().getAngleDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getHasTurnedCmdAccess().getAngleDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCmd__PowerAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoveCmdAccess().getPowerDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getMoveCmdAccess().getPowerDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__MsgAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getMsgSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getPrintCmdAccess().getMsgSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__DurationAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getDurationINTTerminalRuleCall_8_0()); }
	RULE_INT{ after(grammarAccess.getPrintCmdAccess().getDurationINTTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__LineAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getLineINTTerminalRuleCall_12_0()); }
	RULE_INT{ after(grammarAccess.getPrintCmdAccess().getLineINTTerminalRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCmd__ColAssignment_16
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrintCmdAccess().getColINTTerminalRuleCall_16_0()); }
	RULE_INT{ after(grammarAccess.getPrintCmdAccess().getColINTTerminalRuleCall_16_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetTurnAngleCmd__AngleAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTurnAngleCmdAccess().getAngleDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getSetTurnAngleCmdAccess().getAngleDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__PowerAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getPowerDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTurnCmdAccess().getPowerDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCmd__AngleAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTurnCmdAccess().getAngleDOUBLETerminalRuleCall_8_0()); }
	RULE_DOUBLE{ after(grammarAccess.getTurnCmdAccess().getAngleDOUBLETerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObstacleCmd__DistanceAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObstacleCmdAccess().getDistanceDOUBLETerminalRuleCall_4_0()); }
	RULE_DOUBLE{ after(grammarAccess.getObstacleCmdAccess().getDistanceDOUBLETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_DIGIT : '0'..'9';

RULE_DOUBLE : RULE_INT '.' RULE_DIGIT*;

RULE_INT : ('0'|'1'..'9' RULE_DIGIT*);


