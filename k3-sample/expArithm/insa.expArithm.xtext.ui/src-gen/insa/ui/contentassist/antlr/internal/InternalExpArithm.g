/*
* generated by Xtext
*/
grammar InternalExpArithm;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package insa.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package insa.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import insa.services.ExpArithmGrammarAccess;

}

@parser::members {
 
 	private ExpArithmGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpArithmGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpressionArithm
entryRuleExpressionArithm 
:
{ before(grammarAccess.getExpressionArithmRule()); }
	 ruleExpressionArithm
{ after(grammarAccess.getExpressionArithmRule()); } 
	 EOF 
;

// Rule ExpressionArithm
ruleExpressionArithm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionArithmAccess().getRacineAssignment()); }
(rule__ExpressionArithm__RacineAssignment)?
{ after(grammarAccess.getExpressionArithmAccess().getRacineAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEltExp
entryRuleEltExp 
:
{ before(grammarAccess.getEltExpRule()); }
	 ruleEltExp
{ after(grammarAccess.getEltExpRule()); } 
	 EOF 
;

// Rule EltExp
ruleEltExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEltExpAccess().getAlternatives()); }
(rule__EltExp__Alternatives)
{ after(grammarAccess.getEltExpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValeur
entryRuleValeur 
:
{ before(grammarAccess.getValeurRule()); }
	 ruleValeur
{ after(grammarAccess.getValeurRule()); } 
	 EOF 
;

// Rule Valeur
ruleValeur
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValeurAccess().getValeurAssignment()); }
(rule__Valeur__ValeurAssignment)
{ after(grammarAccess.getValeurAccess().getValeurAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlus
entryRulePlus 
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusAccess().getGroup()); }
(rule__Plus__Group__0)
{ after(grammarAccess.getPlusAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMoins
entryRuleMoins 
:
{ before(grammarAccess.getMoinsRule()); }
	 ruleMoins
{ after(grammarAccess.getMoinsRule()); } 
	 EOF 
;

// Rule Moins
ruleMoins
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoinsAccess().getGroup()); }
(rule__Moins__Group__0)
{ after(grammarAccess.getMoinsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMult
entryRuleMult 
:
{ before(grammarAccess.getMultRule()); }
	 ruleMult
{ after(grammarAccess.getMultRule()); } 
	 EOF 
;

// Rule Mult
ruleMult
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultAccess().getGroup()); }
(rule__Mult__Group__0)
{ after(grammarAccess.getMultAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivision
entryRuleDivision 
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivisionAccess().getGroup()); }
(rule__Division__Group__0)
{ after(grammarAccess.getDivisionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EltExp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEltExpAccess().getValeurParserRuleCall_0()); }
	ruleValeur
{ after(grammarAccess.getEltExpAccess().getValeurParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEltExpAccess().getPlusParserRuleCall_1()); }
	rulePlus
{ after(grammarAccess.getEltExpAccess().getPlusParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEltExpAccess().getMoinsParserRuleCall_2()); }
	ruleMoins
{ after(grammarAccess.getEltExpAccess().getMoinsParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEltExpAccess().getMultParserRuleCall_3()); }
	ruleMult
{ after(grammarAccess.getEltExpAccess().getMultParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getEltExpAccess().getDivisionParserRuleCall_4()); }
	ruleDivision
{ after(grammarAccess.getEltExpAccess().getDivisionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Plus__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getPlusAccess().getPlusSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plus__Group__1__Impl
	rule__Plus__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAccess().getEltGaucheAssignment_1()); }
(rule__Plus__EltGaucheAssignment_1)
{ after(grammarAccess.getPlusAccess().getEltGaucheAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plus__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAccess().getEltDroitAssignment_2()); }
(rule__Plus__EltDroitAssignment_2)
{ after(grammarAccess.getPlusAccess().getEltDroitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Moins__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moins__Group__0__Impl
	rule__Moins__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Moins__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoinsAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getMoinsAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moins__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moins__Group__1__Impl
	rule__Moins__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Moins__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoinsAccess().getEltGaucheAssignment_1()); }
(rule__Moins__EltGaucheAssignment_1)
{ after(grammarAccess.getMoinsAccess().getEltGaucheAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Moins__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Moins__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Moins__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoinsAccess().getEltDroitAssignment_2()); }
(rule__Moins__EltDroitAssignment_2)
{ after(grammarAccess.getMoinsAccess().getEltDroitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Mult__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__0__Impl
	rule__Mult__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMultAccess().getAsteriskKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__1__Impl
	rule__Mult__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getEltGaucheAssignment_1()); }
(rule__Mult__EltGaucheAssignment_1)
{ after(grammarAccess.getMultAccess().getEltGaucheAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getEltDroitAssignment_2()); }
(rule__Mult__EltDroitAssignment_2)
{ after(grammarAccess.getMultAccess().getEltDroitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Division__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getDivisionAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__1__Impl
	rule__Division__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getEltGaucheAssignment_1()); }
(rule__Division__EltGaucheAssignment_1)
{ after(grammarAccess.getDivisionAccess().getEltGaucheAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getEltDroitAssignment_2()); }
(rule__Division__EltDroitAssignment_2)
{ after(grammarAccess.getDivisionAccess().getEltDroitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__ExpressionArithm__RacineAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionArithmAccess().getRacineEltExpParserRuleCall_0()); }
	ruleEltExp{ after(grammarAccess.getExpressionArithmAccess().getRacineEltExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Valeur__ValeurAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValeurAccess().getValeurDOUBLETerminalRuleCall_0()); }
	RULE_DOUBLE{ after(grammarAccess.getValeurAccess().getValeurDOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__EltGaucheAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
	ruleEltExp{ after(grammarAccess.getPlusAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__EltDroitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAccess().getEltDroitEltExpParserRuleCall_2_0()); }
	ruleEltExp{ after(grammarAccess.getPlusAccess().getEltDroitEltExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moins__EltGaucheAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoinsAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
	ruleEltExp{ after(grammarAccess.getMoinsAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Moins__EltDroitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoinsAccess().getEltDroitEltExpParserRuleCall_2_0()); }
	ruleEltExp{ after(grammarAccess.getMoinsAccess().getEltDroitEltExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__EltGaucheAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
	ruleEltExp{ after(grammarAccess.getMultAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__EltDroitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getEltDroitEltExpParserRuleCall_2_0()); }
	ruleEltExp{ after(grammarAccess.getMultAccess().getEltDroitEltExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Division__EltGaucheAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
	ruleEltExp{ after(grammarAccess.getDivisionAccess().getEltGaucheEltExpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Division__EltDroitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getEltDroitEltExpParserRuleCall_2_0()); }
	ruleEltExp{ after(grammarAccess.getDivisionAccess().getEltDroitEltExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


