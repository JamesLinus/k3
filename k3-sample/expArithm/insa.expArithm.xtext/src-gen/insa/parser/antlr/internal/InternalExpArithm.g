/*
* generated by Xtext
*/
grammar InternalExpArithm;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package insa.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package insa.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import insa.services.ExpArithmGrammarAccess;

}

@parser::members {

 	private ExpArithmGrammarAccess grammarAccess;
 	
    public InternalExpArithmParser(TokenStream input, ExpArithmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ExpressionArithm";	
   	}
   	
   	@Override
   	protected ExpArithmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpressionArithm
entryRuleExpressionArithm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionArithmRule()); }
	 iv_ruleExpressionArithm=ruleExpressionArithm 
	 { $current=$iv_ruleExpressionArithm.current; } 
	 EOF 
;

// Rule ExpressionArithm
ruleExpressionArithm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionArithmAccess().getRacineEltExpParserRuleCall_0()); 
	    }
		lv_racine_0_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionArithmRule());
	        }
       		set(
       			$current, 
       			"racine",
        		lv_racine_0_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleEltExp
entryRuleEltExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEltExpRule()); }
	 iv_ruleEltExp=ruleEltExp 
	 { $current=$iv_ruleEltExp.current; } 
	 EOF 
;

// Rule EltExp
ruleEltExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEltExpAccess().getValeurParserRuleCall_0()); 
    }
    this_Valeur_0=ruleValeur
    { 
        $current = $this_Valeur_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEltExpAccess().getPlusParserRuleCall_1()); 
    }
    this_Plus_1=rulePlus
    { 
        $current = $this_Plus_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEltExpAccess().getMoinsParserRuleCall_2()); 
    }
    this_Moins_2=ruleMoins
    { 
        $current = $this_Moins_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEltExpAccess().getMultParserRuleCall_3()); 
    }
    this_Mult_3=ruleMult
    { 
        $current = $this_Mult_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEltExpAccess().getDivisionParserRuleCall_4()); 
    }
    this_Division_4=ruleDivision
    { 
        $current = $this_Division_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValeur
entryRuleValeur returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValeurRule()); }
	 iv_ruleValeur=ruleValeur 
	 { $current=$iv_ruleValeur.current; } 
	 EOF 
;

// Rule Valeur
ruleValeur returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_valeur_0_0=RULE_DOUBLE
		{
			newLeafNode(lv_valeur_0_0, grammarAccess.getValeurAccess().getValeurDOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValeurRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"valeur",
        		lv_valeur_0_0, 
        		"DOUBLE");
	    }

)
)
;





// Entry rule entryRulePlus
entryRulePlus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusRule()); }
	 iv_rulePlus=rulePlus 
	 { $current=$iv_rulePlus.current; } 
	 EOF 
;

// Rule Plus
rulePlus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlusAccess().getPlusSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusAccess().getEltGaucheEltExpParserRuleCall_1_0()); 
	    }
		lv_EltGauche_1_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusRule());
	        }
       		set(
       			$current, 
       			"EltGauche",
        		lv_EltGauche_1_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusAccess().getEltDroitEltExpParserRuleCall_2_0()); 
	    }
		lv_eltDroit_2_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusRule());
	        }
       		set(
       			$current, 
       			"eltDroit",
        		lv_eltDroit_2_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMoins
entryRuleMoins returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoinsRule()); }
	 iv_ruleMoins=ruleMoins 
	 { $current=$iv_ruleMoins.current; } 
	 EOF 
;

// Rule Moins
ruleMoins returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMoinsAccess().getHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoinsAccess().getEltGaucheEltExpParserRuleCall_1_0()); 
	    }
		lv_EltGauche_1_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoinsRule());
	        }
       		set(
       			$current, 
       			"EltGauche",
        		lv_EltGauche_1_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMoinsAccess().getEltDroitEltExpParserRuleCall_2_0()); 
	    }
		lv_eltDroit_2_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoinsRule());
	        }
       		set(
       			$current, 
       			"eltDroit",
        		lv_eltDroit_2_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultRule()); }
	 iv_ruleMult=ruleMult 
	 { $current=$iv_ruleMult.current; } 
	 EOF 
;

// Rule Mult
ruleMult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultAccess().getAsteriskKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getEltGaucheEltExpParserRuleCall_1_0()); 
	    }
		lv_EltGauche_1_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		set(
       			$current, 
       			"EltGauche",
        		lv_EltGauche_1_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getEltDroitEltExpParserRuleCall_2_0()); 
	    }
		lv_eltDroit_2_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		set(
       			$current, 
       			"eltDroit",
        		lv_eltDroit_2_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	 iv_ruleDivision=ruleDivision 
	 { $current=$iv_ruleDivision.current; } 
	 EOF 
;

// Rule Division
ruleDivision returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='/' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDivisionAccess().getSolidusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionAccess().getEltGaucheEltExpParserRuleCall_1_0()); 
	    }
		lv_EltGauche_1_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionRule());
	        }
       		set(
       			$current, 
       			"EltGauche",
        		lv_EltGauche_1_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionAccess().getEltDroitEltExpParserRuleCall_2_0()); 
	    }
		lv_eltDroit_2_0=ruleEltExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionRule());
	        }
       		set(
       			$current, 
       			"eltDroit",
        		lv_eltDroit_2_0, 
        		"EltExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_DOUBLE : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


