@startuml

skinparam class {
	BackgroundColor White
	ArrowColor Black
	BorderColor Black
}

class Object {
}

package multipleinheritance.base {
interface A {
    int getA()
}

interface B{
    boolean getB()
}

interface C {
    String getC()
}

abstract VisitorAspect{
    foobar : Boolean
    StringBuilder visit()
}

class AAspect {
	StringBuilder visit()
	fooA()
	fooA2()
}

class BAspect {
	StringBuilder visit()
	fooBMethod()
}

class CAspect {
	StringBuilder visit()
	fooCMethod()
}


class AImpl{
}
class BImpl{
}
class CImpl{
}


B <|-- A
C <|-- A

Object .. VisitorAspect : < 


A .. AAspect : <
BAspect <|-- AAspect  
CAspect <|.. AAspect  : with

B .. BAspect : <
VisitorAspect <|-- BAspect 

C .. CAspect : <
VisitorAspect<|-- CAspect

BImpl <|-- AImpl
A <|.. AImpl 

B <|.. BImpl 

C <|.. CImpl 

}
package multipleinheritance{
class TestMultiInheritance{
testVisitA()
testAccessInheritedField1()
testAccessInheritedField2()

}
}
@enduml
